// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id          Int      @id @default(autoincrement())
  nationalId  String   @unique
  password    String
  fullName    String
  phone       String
  role        Role     @default(STUDENT)
  student     Student?
  teacher     Teacher?
  parent      Parent?
  messagesSent Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  SUPER_ADMIN
  ADMIN
  TEACHER
  PARENT
  STUDENT
}

model Student {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  user        User    @relation(fields: [userId], references: [id])
  studentCode String  @unique
  parentId    Int?
  parent      Parent? @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class   @relation(fields: [classId], references: [id])
  attendances Attendance[]
  grades      Grade[]
  createdAt   DateTime @default(now())
}

model Teacher {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  teacherCode String @unique
  courses   Course[]
  grades    Grade[]
  createdAt DateTime @default(now())
}

model Parent {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
  students  Student[]
  createdAt DateTime  @default(now())
}

model Class {
  id        Int       @id @default(autoincrement())
  name      String
  grade     String
  students  Student[]
  courses   Course[]
  createdAt DateTime  @default(now())
}

model Course {
  id        Int       @id @default(autoincrement())
  name      String
  classId   Int
  class     Class     @relation(fields: [classId], references: [id])
  teacherId Int
  teacher   Teacher   @relation(fields: [teacherId], references: [id])
  schedules Schedule[]
  grades    Grade[]
  createdAt DateTime  @default(now())
}

model Schedule {
  id        Int     @id @default(autoincrement())
  day       WeekDay  // استفاده از enum فارسی
  startTime String
  endTime   String
  courseId  Int
  course    Course  @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
}
enum WeekDay {
  شنبه
  یکشنبه
  دوشنبه
  سه_شنبه
  چهارشنبه
  پنجشنبه
  جمعه
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  status    AttendanceStatus
  studentId Int
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  EXCUSED
  LATE
}

model Grade {
  id        Int       @id @default(autoincrement())
  value     Float
  type      GradeType
  courseId  Int
  course    Course    @relation(fields: [courseId], references: [id])
  studentId Int
  student   Student   @relation(fields: [studentId], references: [id])
  teacherId Int
  teacher   Teacher   @relation(fields: [teacherId], references: [id])
  date      DateTime  @default(now())
  createdAt DateTime  @default(now())
}

enum GradeType {
  EXAM
  QUIZ
  ASSIGNMENT
  PROJECT
  ACTIVITY
}

model Message {
  id          Int      @id @default(autoincrement())
  content     String
  senderId    Int
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId  Int
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}